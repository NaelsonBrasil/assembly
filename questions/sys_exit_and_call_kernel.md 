why of 
call kernel
sys_exit
and call kernel again? 
   mov edx,len     ;message length
   mov ecx,msg     ;message to write
   mov eax,4       ;system call number (sys_write)
   mov ebx,1       ;file descriptor (stdout)
   int 0x80        ;call kernel
   mov eax,1       ;system call number (sys_exit)
   int 0x80        ;call kernel

--- first answer

The first call is for sys_write and the second for sys_exit.
This is an assembler equivalent of something like
call_kernel(SYS_WRITE, stdout, msg, len);
call_kernel(EXIT);

--- second question 
-- i don't understand well it, the call 0x80 looks like all_kernel(SYS_WRITE... ?

--- second answer

Something like that. int is a mnemonics for interrupt, meaning you're interrupting the execution of your program and giving control to the OS.


-- third question
-- why first exit and after call kernel, it don't has order?

--- third answer

The order is correct - because this is how the CPU works, not how humans are used to think of it. First, you load arguments. 
Next, you call a function. You can't do it backwards: when the function is called, all argument should be loaded.
